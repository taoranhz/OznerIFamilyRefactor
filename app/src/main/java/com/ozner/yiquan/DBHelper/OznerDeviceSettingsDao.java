package com.ozner.yiquan.DBHelper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OZNER_DEVICE_SETTINGS".
*/
public class OznerDeviceSettingsDao extends AbstractDao<OznerDeviceSettings, String> {

    public static final String TABLENAME = "OZNER_DEVICE_SETTINGS";

    /**
     * Properties of entity OznerDeviceSettings.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CreateTime = new Property(0, String.class, "createTime", true, "CREATE_TIME");
        public final static Property Mac = new Property(1, String.class, "mac", false, "MAC");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property DevcieType = new Property(3, String.class, "devcieType", false, "DEVCIE_TYPE");
        public final static Property DevicePosition = new Property(4, String.class, "devicePosition", false, "DEVICE_POSITION");
        public final static Property Settings = new Property(5, String.class, "Settings", false, "SETTINGS");
        public final static Property UserId = new Property(6, String.class, "userId", false, "USER_ID");
        public final static Property Status = new Property(7, int.class, "status", false, "STATUS");
    }


    public OznerDeviceSettingsDao(DaoConfig config) {
        super(config);
    }
    
    public OznerDeviceSettingsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OZNER_DEVICE_SETTINGS\" (" + //
                "\"CREATE_TIME\" TEXT PRIMARY KEY NOT NULL ," + // 0: createTime
                "\"MAC\" TEXT," + // 1: mac
                "\"NAME\" TEXT," + // 2: name
                "\"DEVCIE_TYPE\" TEXT," + // 3: devcieType
                "\"DEVICE_POSITION\" TEXT," + // 4: devicePosition
                "\"SETTINGS\" TEXT," + // 5: Settings
                "\"USER_ID\" TEXT," + // 6: userId
                "\"STATUS\" INTEGER NOT NULL );"); // 7: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OZNER_DEVICE_SETTINGS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OznerDeviceSettings entity) {
        stmt.clearBindings();
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(1, createTime);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(2, mac);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String devcieType = entity.getDevcieType();
        if (devcieType != null) {
            stmt.bindString(4, devcieType);
        }
 
        String devicePosition = entity.getDevicePosition();
        if (devicePosition != null) {
            stmt.bindString(5, devicePosition);
        }
 
        String Settings = entity.getSettings();
        if (Settings != null) {
            stmt.bindString(6, Settings);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(7, userId);
        }
        stmt.bindLong(8, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OznerDeviceSettings entity) {
        stmt.clearBindings();
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(1, createTime);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(2, mac);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String devcieType = entity.getDevcieType();
        if (devcieType != null) {
            stmt.bindString(4, devcieType);
        }
 
        String devicePosition = entity.getDevicePosition();
        if (devicePosition != null) {
            stmt.bindString(5, devicePosition);
        }
 
        String Settings = entity.getSettings();
        if (Settings != null) {
            stmt.bindString(6, Settings);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(7, userId);
        }
        stmt.bindLong(8, entity.getStatus());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public OznerDeviceSettings readEntity(Cursor cursor, int offset) {
        OznerDeviceSettings entity = new OznerDeviceSettings( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // createTime
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mac
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // devcieType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // devicePosition
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Settings
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userId
            cursor.getInt(offset + 7) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OznerDeviceSettings entity, int offset) {
        entity.setCreateTime(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMac(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDevcieType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDevicePosition(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSettings(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatus(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(OznerDeviceSettings entity, long rowId) {
        return entity.getCreateTime();
    }
    
    @Override
    public String getKey(OznerDeviceSettings entity) {
        if(entity != null) {
            return entity.getCreateTime();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OznerDeviceSettings entity) {
        return entity.getCreateTime() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
