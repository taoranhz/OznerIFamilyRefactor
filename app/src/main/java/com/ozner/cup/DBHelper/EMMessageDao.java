package com.ozner.cup.DBHelper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EMMESSAGE".
*/
public class EMMessageDao extends AbstractDao<EMMessage, Long> {

    public static final String TABLENAME = "EMMESSAGE";

    /**
     * Properties of entity EMMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Time = new Property(0, long.class, "time", true, "_id");
        public final static Property Userid = new Property(1, String.class, "userid", false, "USERID");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Status = new Property(3, int.class, "status", false, "STATUS");
        public final static Property MType = new Property(4, int.class, "mType", false, "M_TYPE");
        public final static Property MDirect = new Property(5, int.class, "mDirect", false, "M_DIRECT");
    }


    public EMMessageDao(DaoConfig config) {
        super(config);
    }
    
    public EMMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EMMESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: time
                "\"USERID\" TEXT," + // 1: userid
                "\"CONTENT\" TEXT," + // 2: content
                "\"STATUS\" INTEGER NOT NULL ," + // 3: status
                "\"M_TYPE\" INTEGER NOT NULL ," + // 4: mType
                "\"M_DIRECT\" INTEGER NOT NULL );"); // 5: mDirect
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EMMESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EMMessage entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTime());
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
        stmt.bindLong(4, entity.getStatus());
        stmt.bindLong(5, entity.getMType());
        stmt.bindLong(6, entity.getMDirect());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EMMessage entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTime());
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
        stmt.bindLong(4, entity.getStatus());
        stmt.bindLong(5, entity.getMType());
        stmt.bindLong(6, entity.getMDirect());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public EMMessage readEntity(Cursor cursor, int offset) {
        EMMessage entity = new EMMessage( //
            cursor.getLong(offset + 0), // time
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.getInt(offset + 3), // status
            cursor.getInt(offset + 4), // mType
            cursor.getInt(offset + 5) // mDirect
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EMMessage entity, int offset) {
        entity.setTime(cursor.getLong(offset + 0));
        entity.setUserid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStatus(cursor.getInt(offset + 3));
        entity.setMType(cursor.getInt(offset + 4));
        entity.setMDirect(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EMMessage entity, long rowId) {
        entity.setTime(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EMMessage entity) {
        if(entity != null) {
            return entity.getTime();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EMMessage entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
